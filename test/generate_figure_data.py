
# this script loads all .exr files generated by the test scripts and:
#  - converts them to png
#  - stores specified insets (depending on the scene) as png files

import os
from glob import glob
import pyexr
import numpy as np
import scipy.misc

def lin_to_srgb(rgba):
    """
    Linear to sRGB conversion of n-d numpy array:
    rgb<=0.0031308?rgb*12.92:(1.055*(rgb**(1.0/2.4)))-0.055
    """
    return np.clip(np.where(
        np.less_equal(rgba, 0.0031308),
        np.multiply(rgba,  12.92),
        np.subtract(np.multiply(1.055, np.power(rgba, 1.0 / 2.4)), 0.055)), 0.0, 1.0)

# find all .exr files
filenames = []
start_dir = os.getcwd()
pattern   = "*.exr"
for dir,_,_ in os.walk(start_dir):
    filenames.extend(glob(os.path.join(dir,pattern)))

# remove the stratification factor files form the list
factorImages = []
for name in filenames:
    if 'stratfactor-d' in name:
        factorImages.append(name)
for name in factorImages:
    filenames.remove(name)

# convert each file to png
for f in filenames:
    img = pyexr.read(f)
    fnamePng = f.replace('.exr', '.png')

    exposure = 0.0
    if 'bathroom' in f:
        exposure = 0.0
    elif 'livingroom' in f:
        exposure = 1.0
    elif 'staircase1' in f:
        exposure = 2.0

    tmapped = lin_to_srgb(img * pow(2, exposure))
    scipy.misc.toimage(tmapped, cmin=0.0, cmax=1.0).save(fnamePng)

    # generate the insets for each file
    left = 0
    top = 0
    w = 50
    h = 50

    # first inset
    if 'bathroom' in f:
        left = 600
        top = 110
        w = 100
        h = 100
        exposure = -1.0

    fnameInset1 = fnamePng.replace('.png', '-inset1.png')

    tmapped = lin_to_srgb(img[top:top+h,left:left+w,:] * pow(2, exposure))
    scipy.misc.toimage(tmapped, cmin=0.0, cmax=1.0).save(fnameInset1)

    # second inset
    if 'bathroom' in f:
        left = 260
        top = 520
        w = 100
        h = 100
        exposure = 0.0

    fnameInset2 = fnamePng.replace('.png', '-inset2.png')

    tmapped = lin_to_srgb(img[top:top+h,left:left+w,:] * pow(2, exposure))
    scipy.misc.toimage(tmapped, cmin=0.0, cmax=1.0).save(fnameInset2)